//  Copyright 2018 Google Inc.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:/
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software./
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/rtl/mixins" as rtl-mixins;
@use "@material/theme/mixins" as theme-mixins;
@use "./variables";

// Public mixins

@mixin icon-core-styles($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-select--with-leading-icon {
    @include icon_($query: $query);
  }

  .mdc-select__icon:not([tabindex]),
  .mdc-select__icon[tabindex="-1"] {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: default;
      pointer-events: none;
    }
  }
}

@mixin icon-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include icon-color_($color, $query: $query);
  }
}

// Private mixins

@mixin icon_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include icon-color(on-surface, $query: $query);

  .mdc-select__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-block;
      position: absolute;
      bottom: 16px;
      box-sizing: border-box;
      width: variables.$icon-size;
      height: variables.$icon-size;
      border: none;
      opacity: variables.$icon-opacity;
      text-decoration: none;
      cursor: pointer;
      user-select: none;
    }

    @include feature-targeting-mixins.targets($feat-color) {
      background-color: transparent;
      fill: currentColor;
    }
  }
}

@mixin icon-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-select__icon {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

@mixin icon-horizontal-position_($iconPosition, $inputPadding, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-select__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-position(left, $iconPosition);
    }
  }

  // Move the input's position, to allow room for the icon
  .mdc-select__selected-text {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(padding, $inputPadding /* left */, variables.$icon-right-padding /* right */);
    }
  }
}
